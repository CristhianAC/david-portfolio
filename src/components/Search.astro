---
// Astro component: Search.astro - No server-side imports needed
---

<script type="module">
  import Fuse from "https://cdn.jsdelivr.net/npm/fuse.js@6.6.2/dist/fuse.esm.js";

  let query = "";
  let results = [];
  let searchIndex = [];
  let fuse = null;

  // Load search index from JSON file
  async function loadSearchIndex() {
    try {
      const response = await fetch("/search-index.json");
      searchIndex = await response.json();
      fuse = new Fuse(searchIndex, {
        keys: ["title", "description", "tags", "category", "author"],
        threshold: 0.3,
      });
    } catch (error) {
      console.error("Error loading search index:", error);
    }
  }

  function handleInput(e) {
    if (!fuse) return;

    query = e.target.value;
    results = query ? fuse.search(query).map((r) => r.item) : [];
    updateResults();
  }

  function updateResults() {
    const list = document.getElementById("search-results");
    if (!list) return;

    // Show/hide results container with animation
    if (query.trim() === "") {
      hideResults(list);
      return;
    }

    showResults(list);
    list.innerHTML = "";

    if (results.length > 0) {
      results.forEach((item, index) => {
        const li = document.createElement("li");
        li.className = "border-b border-gray-200 dark:border-gray-700 last:border-b-0 opacity-0 translate-y-2 transition-all duration-300";
        
        // Animate each result with a slight delay
        setTimeout(() => {
          li.classList.remove("opacity-0", "translate-y-2");
        }, index * 50);

        const a = document.createElement("a");
        a.href = `/article/${item.slug}`;
        a.className = "block p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-all duration-200 group";

        a.innerHTML = `
          <h4 class="font-semibold text-gray-900 dark:text-gray-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-200">${item.title}</h4>
          <p class="text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2">${item.description}</p>
          <div class="flex items-center gap-2 mt-3 text-xs">
            <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full font-medium">${item.category}</span>
            <span class="text-gray-500 dark:text-gray-400">by ${item.author}</span>
          </div>
        `;

        li.appendChild(a);
        list.appendChild(li);
      });
    } else if (query) {
      const li = document.createElement("li");
      li.className = "opacity-0 translate-y-2 transition-all duration-300";
      li.innerHTML = `
        <div class="p-6 text-center">
          <div class="text-gray-400 dark:text-gray-500 mb-2">
            <svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.034 0-3.9.785-5.291 2.068A7.962 7.962 0 014 12a8.001 8.001 0 0116 0 7.962 7.962 0 01-2.709 5.291z" />
            </svg>
          </div>
          <p class="text-gray-500 dark:text-gray-400">No se encontraron resultados para "${query}"</p>
          <p class="text-sm text-gray-400 dark:text-gray-500 mt-1">Intenta con términos diferentes</p>
        </div>
      `;
      
      setTimeout(() => {
        li.classList.remove("opacity-0", "translate-y-2");
      }, 100);
      
      list.appendChild(li);
    }
  }

  function showResults(list) {
    list.classList.remove("hidden");
    list.classList.add("animate-fadeInUp");
    list.classList.remove("animate-fadeOutDown");
  }

  function hideResults(list) {
    list.classList.add("animate-fadeOutDown");
    list.classList.remove("animate-fadeInUp");
    
    setTimeout(() => {
      list.classList.add("hidden");
      list.classList.remove("animate-fadeOutDown");
    }, 200);
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", async () => {
    await loadSearchIndex();

    // Attach event listener to input
    const searchInput = document.getElementById("search-input");
    const resultsContainer = document.getElementById("search-results");
    
    if (searchInput) {
      searchInput.addEventListener("input", handleInput);
      
      // Focus effects
      searchInput.addEventListener("focus", () => {
        searchInput.classList.add("ring-2", "ring-blue-500", "dark:ring-blue-400");
      });
      
      searchInput.addEventListener("blur", (e) => {
        // Delay hiding results to allow clicking on them
        setTimeout(() => {
          if (!e.relatedTarget || !resultsContainer.contains(e.relatedTarget)) {
            hideResults(resultsContainer);
          }
        }, 150);
        
        searchInput.classList.remove("ring-2", "ring-blue-500", "dark:ring-blue-400");
      });
    }

    // Click outside to close results
    document.addEventListener("click", (e) => {
      if (!searchInput.contains(e.target) && !resultsContainer.contains(e.target)) {
        hideResults(resultsContainer);
      }
    });
  });
</script>

<div class="search-container mb-8">
  <div class="relative max-w-lg mx-auto">
    <!-- Search Input -->
    <div class="relative group">
      <input
        id="search-input"
        type="text"
        placeholder="Buscar artículos de Machine Learning..."
        class="w-full px-4 py-3 pr-12 text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent transition-all duration-200 placeholder-gray-500 dark:placeholder-gray-400"
        autocomplete="off"
      />
      <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
        <svg
          class="w-5 h-5 text-gray-400 dark:text-gray-500 group-focus-within:text-blue-500 dark:group-focus-within:text-blue-400 transition-colors duration-200"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
          ></path>
        </svg>
      </div>
    </div>

    <!-- Results Container -->
    <div class="relative mt-2">
      <ul
        id="search-results"
        class="absolute top-0 left-0 right-0 z-50 border border-gray-200 dark:border-gray-700 rounded-xl bg-white dark:bg-gray-800 shadow-xl backdrop-blur-sm hidden max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent"
      >
      </ul>
    </div>
  </div>
</div>

<!-- CSS Animations -->
<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(-10px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  @keyframes fadeOutDown {
    from {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
    to {
      opacity: 0;
      transform: translateY(-10px) scale(0.95);
    }
  }

  .animate-fadeInUp {
    animation: fadeInUp 0.2s ease-out forwards;
  }

  .animate-fadeOutDown {
    animation: fadeOutDown 0.2s ease-in forwards;
  }

  /* Custom scrollbar for dark mode compatibility */
  .scrollbar-thin {
    scrollbar-width: thin;
  }
  
  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb {
    background-color: rgb(209 213 219);
    border-radius: 3px;
  }
  
  .dark .scrollbar-thin::-webkit-scrollbar-thumb {
    background-color: rgb(75 85 99);
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background-color: rgb(156 163 175);
  }
  
  .dark .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background-color: rgb(107 114 128);
  }

  /* Line clamp for descriptions */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
